{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"concepts/overview/","title":"Concepts","text":""},{"location":"contribute/docs/","title":"Documentation","text":""},{"location":"contribute/docs/#getting-started","title":"Getting started","text":"<p>This documentation is done using MkDocs with multiple plugins enabled. It's based on the Markdown, you can find basic syntax overview here.</p> <p>In order to contribute to the documentation, you'll need to have Git and Docker installed on your machine as well as any editor of your choice, preferably supporting Markdown preview. You can run the preview server using following command:</p> <pre><code>make serve\n</code></pre> <p>Now you can open continuosly updated preview of your edits in browser at http://127.0.0.1:8000. Pages will be automatically updated while you're editing.</p> <p>Additionally you can run</p> <pre><code>make build\n</code></pre> <p>to make sure that your changes will be built correctly and doesn't break documentation.</p>"},{"location":"contribute/docs/#workflow","title":"Workflow","text":"<p>If you want to quick edit any page in the documentation, you can press the <code>Edit this page</code> icon at the top right of the page. It'll open the page in the GitHub editor. You can edit it and create a pull request with your changes.</p> <p>Please, never push to the <code>master</code> or <code>release/*</code> branches directly. Always create a pull request and wait for the review.</p> <p>Each pull request will be automatically built and preview will be deployed. You can find the link to the preview in the comments in pull request.</p>"},{"location":"contribute/docs/#repository","title":"Repository","text":"<p>Documentation is organized in per-release branches:</p> <ul> <li><code>master</code> - ongoing development, not released yet, referenced as <code>dev</code> version in the documentation</li> <li><code>release/alpha-1</code>/<code>release/alpha-2</code> - alpha releases, referenced as <code>alpha-1</code>/<code>alpha-2</code> versions in the documentation, if patches released for alpha-1, they'll be merged into <code>release/alpha-1</code> branch</li> <li><code>release/v1.0</code> - first stable release, referenced as <code>v1.0</code> version in the documentation, if patches (e.g. <code>v1.0.1</code>) released for v1.0, they'll be merged into <code>release/v1.0</code> branch</li> </ul> <p>Latest release branch is referenced as <code>latest</code> version in the documentation and will be used by default when you open the documentation.</p>"},{"location":"contribute/docs/#file-layout","title":"File layout","text":"<p>All documentation files are located in <code>docs</code> directory. Each file is a Markdown file with <code>.md</code> extension. You can create subdirectories to organize your files. Each directory can have a <code>.pages</code> file that overrides the default navigation order and titles.</p> <p>For example, top-level <code>.pages</code> in this repository looks like this:</p> <pre><code>nav:\n  - index.md\n  - getting-started\n  - concepts\n  - Wiring Diagram: wiring\n  - Install &amp; Upgrade: install-upgrade\n  - User Guide: user-guide\n  - Reference: reference\n  - Troubleshooting: troubleshooting\n  - ...\n  - release-notes\n  - contribute\n</code></pre> <p>Where you can add pages by file name like <code>index.md</code> and page title will be taked from the file (first line with <code>#</code>). Additionally, you can reference the whole directory to created nested section in navigation. You can also add custom titles by using <code>:</code> separator like <code>Wiring Diagram: wiring</code> where <code>Wiring Diagram</code> is a title and <code>wiring</code> is a file/directory name.</p> <p>More details in the MkDocs Pages plugin.</p>"},{"location":"contribute/docs/#abbreaviations","title":"Abbreaviations","text":"<p>You can find abbreviations in <code>includes/abbreviations.md</code> file. You can add various abbreviations there and all usages of the defined words in the documentation will get a highlight.</p> <p>For example, we have following in <code>includes/abbreviations.md</code>:</p> <pre><code>*[HHFab]: Hedgehog Fabricator - a tool for building Hedgehog Fabric\n</code></pre> <p>It'll highlight all usages of <code>HHFab</code> in the documentation and show a tooltip with the definition like this: HHFab.</p>"},{"location":"contribute/docs/#markdown-extensions","title":"Markdown extensions","text":"<p>We're using MkDocs Material theme with multiple extensions enabled. You can find detailed reference here, but here you can find some of the most useful ones.</p> <p>To view code for examples, please, check the source code of this page.</p>"},{"location":"contribute/docs/#text-formatting","title":"Text formatting","text":"<p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <p>Keyboard keys can be written like so:</p> <p>Ctrl+Alt+Del</p> <p>Amd inline icons/emojis can be added like this:</p> <pre><code>:fontawesome-regular-face-laugh-wink:\n:fontawesome-brands-twitter:{ .twitter }\n</code></pre> <p> </p>"},{"location":"contribute/docs/#admonitions","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Different types of admonitions are available, each with a unique icon and color. Details can be found here.</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"contribute/docs/#code-blocks","title":"Code blocks","text":"<p>Details can be found here.</p> <p>Simple code block with line nums and higlighted lines:</p> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Code annotations:</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"contribute/docs/#tabs","title":"Tabs","text":"<p>You can use Tabs to better organize content.</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"contribute/docs/#tables","title":"Tables","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"contribute/docs/#diagrams","title":"Diagrams","text":"<p>You can directly include Mermaid diagrams in your Markdown files. Details can be found here.</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"getting-started/overview/","title":"Getting Started","text":""},{"location":"install-upgrade/overview/","title":"Overview","text":""},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/cli/","title":"CLI reference","text":""},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#alpha-2","title":"Alpha-2","text":"<p>TBD</p>"},{"location":"release-notes/#alpha-1","title":"Alpha-1","text":"<ul> <li> <p>Controller:</p> <ul> <li>A single controller connecting to each switch management port. No redundancy.</li> </ul> </li> <li> <p>Controller requirements:</p> <ul> <li>One 1 gig port per switch</li> <li>One+ 1 gig+ ports connecting to the external management network.</li> <li>4 Cores, 12GB RAM, 100GB SSD.</li> </ul> </li> <li> <p>Seeder:</p> <ul> <li>Seeder and Controller functions co-resident on the control node. Switch booting and ZTP on management ports directly connected to the controller.</li> </ul> </li> <li> <p>HHFab - the fabricator:</p> <ul> <li>An operational tool to generate, initiate, and maintain the fabric software appliance.  Allows fabrication of the environment-specific image with all of the required underlay and security configuration baked in.</li> </ul> </li> <li> <p>DHCP Service:</p> <ul> <li>A simple DHCP server for assigning IP addresses to hosts connecting to the fabric, optimized for use with VPC overlay.</li> </ul> </li> <li> <p>Topology:</p> <ul> <li>Support for a Collapsed Core topology with 2 switch nodes.</li> </ul> </li> <li> <p>Underlay:</p> <ul> <li>A simple single-VRF network with a BGP control plane.  IPv4 support only.</li> </ul> </li> <li> <p>External connectivity:</p> <ul> <li>An edge router must be connected to selected ports of one or both switches.  IPv4 support only.</li> </ul> </li> <li> <p>Dual-homing:</p> <ul> <li>L2 Dual homing with MCLAG is implemented to connect servers, storage, and other devices in the data center.  NIC bonding and LACP configuration at the host are required.</li> </ul> </li> <li> <p>VPC overlay implementation:</p> <ul> <li>VPC is implemented as a set of ACLs within the underlay VRF. External connectivity to the VRF is performed via internally managed VLANs.  IPv4 support only.</li> </ul> </li> <li> <p>VPC Peering:</p> <ul> <li>VPC peering is performed via ACLs with no fine-grained control.</li> </ul> </li> <li> <p>NAT</p> <ul> <li>DNAT + SNAT are supported per VPC. SNAT and DNAT can\u2019t be enabled per VPC simultaneously.</li> </ul> </li> <li> <p>Hardware support:</p> <ul> <li>Please see the supported hardware list.</li> </ul> </li> <li> <p>Virtual Lab:</p> <ul> <li>A simulation of the two-node Collapsed Core Topology as a virtual environment. Designed for use as a network simulation, a configuration scratchpad, or a training/demonstration tool.  Minimum requirements: 8 cores, 24GB RAM, 100GB SSD</li> </ul> </li> <li> <p>Limitations:</p> <ul> <li>40 VPCs max</li> <li>50 VPC peerings</li> <li>[ 768 ACL entry platform limitation from Broadcom ]</li> </ul> </li> <li> <p>Software versions:</p> <ul> <li>Fabricator: v0.5.2</li> <li>Fabric: v0.18.6</li> <li>Das-boot: v0.8.2</li> <li>K3s: v1.27.4-k3s1</li> <li>Zot: v1.4.3</li> <li>SONiC: Broadcom Enterprise Base 4.1.1</li> </ul> </li> </ul>"},{"location":"troubleshooting/overview/","title":"Troubleshooting","text":""},{"location":"user-guide/overview/","title":"Overview","text":""},{"location":"user-guide/vpc/","title":"VPCs","text":""},{"location":"wiring/clos/","title":"Clos","text":"<p>Placeholder:</p> <pre><code>flowchart TD\n    spine1 --- leaf1\n    spine2 --- leaf1\n    spine1 --- leaf2\n    spine2 --- leaf2\n    spine1 --- leaf3\n    spine2 --- leaf3\n    spine1 --- leaf4\n    spine2 --- leaf4\n    leaf1 --- edge1\n    leaf2 --- edge1\n    leaf3 --- edge2\n    leaf4 --- edge2</code></pre>"},{"location":"wiring/overview/","title":"Wiring Diagram","text":""}]}