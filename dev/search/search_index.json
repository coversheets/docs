{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"concepts/overview/","title":"Concepts","text":""},{"location":"contribute/docs/","title":"Documentation","text":""},{"location":"contribute/docs/#getting-started","title":"Getting started","text":"<p>This documentation is done using MkDocs with multiple plugins enabled. It's based on the Markdown, you can find basic syntax overview here.</p> <p>In order to contribute to the documentation, you'll need to have Git and Docker installed on your machine as well as any editor of your choice, preferably supporting Markdown preview. You can run the preview server using following command:</p> <pre><code>make serve\n</code></pre> <p>Now you can open continuosly updated preview of your edits in browser at http://127.0.0.1:8000. Pages will be automatically updated while you're editing.</p> <p>Additionally you can run</p> <pre><code>make build\n</code></pre> <p>to make sure that your changes will be built correctly and doesn't break documentation.</p>"},{"location":"contribute/docs/#workflow","title":"Workflow","text":"<p>If you want to quick edit any page in the documentation, you can press the <code>Edit this page</code> icon at the top right of the page. It'll open the page in the GitHub editor. You can edit it and create a pull request with your changes.</p> <p>Please, never push to the <code>master</code> or <code>release/*</code> branches directly. Always create a pull request and wait for the review.</p> <p>Each pull request will be automatically built and preview will be deployed. You can find the link to the preview in the comments in pull request.</p>"},{"location":"contribute/docs/#repository","title":"Repository","text":"<p>Documentation is organized in per-release branches:</p> <ul> <li><code>master</code> - ongoing development, not released yet, referenced as <code>dev</code> version in the documentation</li> <li><code>release/alpha-1</code>/<code>release/alpha-2</code> - alpha releases, referenced as <code>alpha-1</code>/<code>alpha-2</code> versions in the documentation, if patches released for alpha-1, they'll be merged into <code>release/alpha-1</code> branch</li> <li><code>release/v1.0</code> - first stable release, referenced as <code>v1.0</code> version in the documentation, if patches (e.g. <code>v1.0.1</code>) released for v1.0, they'll be merged into <code>release/v1.0</code> branch</li> </ul> <p>Latest release branch is referenced as <code>latest</code> version in the documentation and will be used by default when you open the documentation.</p>"},{"location":"contribute/docs/#file-layout","title":"File layout","text":"<p>All documentation files are located in <code>docs</code> directory. Each file is a Markdown file with <code>.md</code> extension. You can create subdirectories to organize your files. Each directory can have a <code>.pages</code> file that overrides the default navigation order and titles.</p> <p>For example, top-level <code>.pages</code> in this repository looks like this:</p> <pre><code>nav:\n  - index.md\n  - getting-started\n  - concepts\n  - Wiring Diagram: wiring\n  - Install &amp; Upgrade: install-upgrade\n  - User Guide: user-guide\n  - Reference: reference\n  - Troubleshooting: troubleshooting\n  - ...\n  - release-notes\n  - contribute\n</code></pre> <p>Where you can add pages by file name like <code>index.md</code> and page title will be taked from the file (first line with <code>#</code>). Additionally, you can reference the whole directory to created nested section in navigation. You can also add custom titles by using <code>:</code> separator like <code>Wiring Diagram: wiring</code> where <code>Wiring Diagram</code> is a title and <code>wiring</code> is a file/directory name.</p> <p>More details in the MkDocs Pages plugin.</p>"},{"location":"contribute/docs/#abbreaviations","title":"Abbreaviations","text":"<p>You can find abbreviations in <code>includes/abbreviations.md</code> file. You can add various abbreviations there and all usages of the defined words in the documentation will get a highlight.</p> <p>For example, we have following in <code>includes/abbreviations.md</code>:</p> <pre><code>*[HHFab]: Hedgehog Fabricator - a tool for building Hedgehog Fabric\n</code></pre> <p>It'll highlight all usages of <code>HHFab</code> in the documentation and show a tooltip with the definition like this: HHFab.</p>"},{"location":"contribute/docs/#markdown-extensions","title":"Markdown extensions","text":"<p>We're using MkDocs Material theme with multiple extensions enabled. You can find detailed reference here, but here you can find some of the most useful ones.</p> <p>To view code for examples, please, check the source code of this page.</p>"},{"location":"contribute/docs/#text-formatting","title":"Text formatting","text":"<p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <p>Keyboard keys can be written like so:</p> <p>Ctrl+Alt+Del</p> <p>Amd inline icons/emojis can be added like this:</p> <pre><code>:fontawesome-regular-face-laugh-wink:\n:fontawesome-brands-twitter:{ .twitter }\n</code></pre> <p> </p>"},{"location":"contribute/docs/#admonitions","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Different types of admonitions are available, each with a unique icon and color. Details can be found here.</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"contribute/docs/#code-blocks","title":"Code blocks","text":"<p>Details can be found here.</p> <p>Simple code block with line nums and higlighted lines:</p> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Code annotations:</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"contribute/docs/#tabs","title":"Tabs","text":"<p>You can use Tabs to better organize content.</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"contribute/docs/#tables","title":"Tables","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"contribute/docs/#diagrams","title":"Diagrams","text":"<p>You can directly include Mermaid diagrams in your Markdown files. Details can be found here.</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"getting-started/overview/","title":"Getting Started","text":""},{"location":"install-upgrade/onie-update/","title":"ONIE Update/Upgrade","text":""},{"location":"install-upgrade/onie-update/#hedgehog-onie-honie-supported-systems","title":"Hedgehog ONIE (HONIE) Supported Systems","text":"<ul> <li> <p>DELL</p> </li> <li> <p>S5248F-ON</p> </li> <li> <p>S5232F-ON</p> </li> <li> <p>Edge-Core</p> </li> <li> <p>DCS501 (AS7726-32X)</p> </li> <li> <p>DCS203 (AS7326-56X)</p> </li> <li> <p>EPS203 (AS4630-54NPE)</p> </li> </ul>"},{"location":"install-upgrade/onie-update/#updating-onie","title":"Updating ONIE","text":"<ul> <li> <p>Via USB</p> </li> <li> <p>For this example we will be updating a DELL S5248 to Hedgehog ONIE (HONIE)</p> <ul> <li>Note: the USB port is on the back of the switch with the Management and Console</li> </ul> </li> <li> <p>Prepare the USB stick by burning the honie-usb.img to a 4G or larger USB drive</p> </li> <li> <p>Insert the USB drive into the switch</p> <ul> <li> <p>For example, to burn the file to disk X of an OSX machine</p> </li> <li> <p>sudo dd if=honie-usb.img of=/dev/rdiskX bs=1m</p> </li> </ul> </li> <li> <p>Boot into ONIE Installer</p> <ul> <li> <p></p> </li> <li> <p></p> </li> <li></li> </ul> </li> <li> <p>ONIE will install the ONIE update and reboot</p> <ul> <li>`ONIE: OS Install Mode ...</li> </ul> <p>Platform\u00a0 : x86_64-dellemc_s5200_c3538-r0</p> <p>Version \u00a0 : 3.40.1.1-7 &lt;- Non HONIE version</p> <p>Build Date: 2020-03-24T20:44-07:00</p> <p>Info: Mounting EFI System on /boot/efi ...</p> <p>Info: BIOS mode: UEFI</p> <p>Info: Making NOS install boot mode persistent.</p> <p>Info: Using eth0 MAC address: 3c:2c:30:66:f0:00</p> <p>Info: eth0:\u00a0 Checking link... up.</p> <p>Info: Trying DHCPv4 on interface: eth0</p> <p>Warning: Unable to configure interface using DHCPv4: eth0</p> <p>ONIE: Using link-local IPv4 addr: eth0: 169.254.95.249/16</p> <p>Starting: klogd... done.</p> <p>Starting: dropbear ssh daemon... done.</p> <p>Starting: telnetd... done.</p> <p>discover: installer mode detected.\u00a0 Running installer.</p> <p>Starting: discover... done.</p> <p>Please press Enter to activate this console. Info: eth0:\u00a0 Checking link... up.</p> <p>Info: Trying DHCPv4 on interface: eth0</p> <p>Warning: Unable to configure interface using DHCPv4: eth0</p> <p>ONIE: Using link-local IPv4 addr: eth0: 169.254.6.139/16</p> <p>ONIE: Starting ONIE Service Discovery</p> <p>Info: Attempting file://dev/sdb1/onie-installer-x86_64-dellemc_s5248f_c3538-r0 ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64-dellemc_s5248f_c3538-r0 ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64-dellemc_s5248f_c3538-r0.bin ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64-dellemc_s5248f_c3538.bin ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-dellemc_s5248f_c3538 ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-dellemc_s5248f_c3538.bin ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64-bcm ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64-bcm.bin ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64 ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer-x86_64.bin ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer ...</p> <p>Info: Attempting file://dev/mmcblk0p1/onie-installer.bin ...</p> <p>ONIE: Executing installer: file://dev/sdb1/onie-installer-x86_64-dellemc_s5248f_c3538-r0</p> <p>Verifying image checksum ... OK.</p> <p>Preparing image archive ... OK.</p> <p>ONIE: Version \u00a0 \u00a0 \u00a0 : 3.40.1.1-8 &lt;- HONIE Version</p> <p>ONIE: Architecture\u00a0 : x86_64</p> <p>ONIE: Machine \u00a0 \u00a0 \u00a0 : dellemc_s5200_c3538</p> <p>ONIE: Machine Rev \u00a0 : 0</p> <p>ONIE: Config Version: 1</p> <p>ONIE: Build Date\u00a0 \u00a0 : 2023-12-15T23:43+00:00</p> <p>Installing ONIE on: /dev/sda</p> <p>ONIE: NOS install successful: file://dev/sdb1/onie-installer-x86_64-dellemc_s5248f_c3538-r0</p> <p>ONIE: Rebooting...</p> <p>discover: installer mode detected.</p> <p>Stopping: discover...start-stop-daemon: warning: killing process 665: No such process</p> <p>Info: Unmounting kernel filesystems</p> <p>umount: can't unmount /: Invalid argument</p> <p>The system is going down NOW!</p> <p>Sent SIGTERM to all processes</p> <p>Sent SIGKILL to all processes</p> <p>Requesting system reboot`</p> </li> <li> <p>System is now ready for use</p> </li> </ul>"},{"location":"install-upgrade/overview/","title":"Overview","text":""},{"location":"install-upgrade/supported-devices/","title":"Supported Device List","text":""},{"location":"install-upgrade/supported-devices/#alpha-2","title":"Alpha-2","text":"<p>These devices are supported in HedgeHog fabric for Alpha-2</p>"},{"location":"install-upgrade/supported-devices/#spine","title":"Spine","text":"<ul> <li>DELL: S5232F-ON</li> <li>EDGE-CORE: DCS204 (AS7726-54x)</li> </ul>"},{"location":"install-upgrade/supported-devices/#leaf","title":"Leaf","text":"<ul> <li>DELL: S5232F-ON</li> <li>EDGE-CORE: DCS204 (AS7726-32X), DCS203 (AS7326-56X), EPS203 (AS4630-54NPE)</li> </ul>"},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/cli/","title":"CLI reference","text":""},{"location":"release-notes/","title":"Release notes","text":""},{"location":"release-notes/#alpha-2","title":"Alpha-2","text":""},{"location":"release-notes/#controller","title":"Controller","text":"<p>A single controller. No controller redundancy.</p>"},{"location":"release-notes/#controller-connectivity","title":"Controller connectivity","text":"<p>For CLOS/LEAF-SPINE fabrics, it is recommended that the controller connects to one or more leaf switches in the fabric on front-facing data ports. Connection to two or more leaf switches is recommended for redundancy and performance. No port break-out functionality is supported for controller connectivity.</p> <p>Spine controller connectivity is not supported.</p> <p>For Collapsed Core topology, the controller can connect on front-facing data ports, as described above, or on management ports. Note that every switch in the collapsed core topology must be connected to the controller.</p> <p>Management port connectivity can also be supported for CLOS/LEAF-SPINE topology but requires all switches connected to the controllers via management ports. No chain booting is possible for this configuration.</p>"},{"location":"release-notes/#controller-requirements","title":"Controller requirements","text":"<ul> <li>One  1 gig+ port per to connect to each controller attached switch</li> <li>One+ 1 gig+ ports connecting to the external management network.</li> <li>4 Cores, 12GB RAM, 100GB SSD.</li> </ul>"},{"location":"release-notes/#chain-booting","title":"Chain booting","text":"<p>Switches not directly connecting to the controllers can chain boot via the data network.</p>"},{"location":"release-notes/#topology-support","title":"Topology support","text":"<p>CLOS/LEAF-SPINE and Collapsed Core topologies are supported.</p>"},{"location":"release-notes/#leaf-roles-for-clos-topology","title":"LEAF Roles for CLOS topology","text":"<p>server leaf, border leaf, and mixed leaf modes are supported.</p>"},{"location":"release-notes/#collapsed-core-topology","title":"Collapsed Core Topology","text":"<p>Two ToR/LEAF switches with MCLAG server connection.</p>"},{"location":"release-notes/#server-multihoming","title":"Server multihoming","text":"<p>MCLAG-only.</p>"},{"location":"release-notes/#device-support","title":"Device support","text":""},{"location":"release-notes/#leafs","title":"LEAFs","text":"<ul> <li>DELL:</li> <li>S5248F-ON</li> <li> <p>S5232F-ON</p> </li> <li> <p>Edge-Core:</p> </li> <li>DCS204 (AS7726-32X)</li> <li>DCS203 (AS7326-56X)</li> <li>EPS203 (AS4630-54NPE)</li> </ul>"},{"location":"release-notes/#spines","title":"SPINEs","text":"<ul> <li>DELL:</li> <li>S5232F-ON</li> <li>Edge-Core:</li> <li>DCS204 (AS7726-32X)</li> </ul>"},{"location":"release-notes/#underlay-configuration","title":"Underlay configuration:","text":"<p>Port speed, port group speed, port breakouts are configurable through the API</p>"},{"location":"release-notes/#vpc-overlay-implementation","title":"VPC (overlay) Implementation","text":"<p>VXLAN-based BGP eVPN.</p>"},{"location":"release-notes/#multi-subnet-vpcs","title":"Multi-subnet VPCs","text":"<p>A VPC consists of subnets, each with a user-specified VLAN for external host/server connectivity.</p>"},{"location":"release-notes/#multiple-ip-address-namespaces","title":"Multiple IP address namespaces","text":"<p>Multiple IP address namespaces are supported per fabric. Each VPC belongs to the corresponding IPv4 namespace. There are no subnet overlaps within a single IPv4 namespace. IP address namespaces can mutually overlap.</p>"},{"location":"release-notes/#vlan-namespace","title":"VLAN Namespace","text":"<p>VLAN Namespaces guarantee the uniqueness of VLANs for a set of participating devices. Each switch belongs to a list of VLAN namespaces with non-overlapping VLAN ranges. Each VPC belongs to the VLAN namespace. There are no VLAN overlaps within a single VLAN namespace.</p> <p>This feature is useful when multiple VM-management domains (like separate VMware clusters connect to the fabric).</p>"},{"location":"release-notes/#switch-groups","title":"Switch Groups","text":"<p>Each switch belongs to a list of switch groups used for identifying redundancy groups for things like external connectivity.</p>"},{"location":"release-notes/#mutual-vpc-peering","title":"Mutual VPC Peering","text":"<p>VPC peering is supported and possible between a pair of VPCs that belong to the same IPv4 and VLAN namespaces.</p>"},{"location":"release-notes/#external-vpc-peering","title":"External VPC Peering","text":"<p>VPC peering provides the means of peering with external networking devices (edge routers, firewalls, or data center interconnects). VPC egress/ingress is pinned to a specific group of the border or mixed leaf switches. Multiple \u201cexternal systems\u201d with multiple devices/links in each of them are supported.</p> <p>The user controls what subnets/prefixes to import and export from/to the external system.</p> <p>No NAT function is supported for external peering.</p>"},{"location":"release-notes/#host-connectivity","title":"Host connectivity","text":"<p>Servers can be attached as Unbundled, Bundled (LAG) and MCLAG</p>"},{"location":"release-notes/#dhcp-service","title":"DHCP Service","text":"<p>VPC is provided with an optional DHCP service with simple IPAM</p>"},{"location":"release-notes/#local-vpc-peering-loopbacks","title":"Local VPC peering loopbacks","text":"<p>To enable local inter-vpc peering that allows routing of traffic between VPCs, local loopbacks are required to overcome silicon limitations.</p>"},{"location":"release-notes/#scale","title":"Scale","text":"<ul> <li>Maximum fabric size: 20 LEAF/ToR switches.</li> <li>Routes per switch: 64k</li> <li>[ silicon platform limitation in Trident 3; limits te number of endpoints in the fabric  ]</li> <li>Total VPCs per switch: up to 1000</li> <li>[ Including VPCs attached at the given switch and VPCs peered with ]</li> <li>Total VPCs per VLAN namespace: up to 3000</li> <li>[ assuming 1 subnet per VPC ]</li> <li>Total VPCs per fabric:  unlimited</li> <li>[ if using multiple VLAN namespaces ]</li> <li>VPC subnets per switch: up to 3000</li> <li>VPC subnets per VLAN namespace up to 3000</li> <li>Subnets per VPC: up to 20</li> <li>[ just a validation; the current design allows up to 100, but it could be increased even more in the future ]</li> <li>VPC Slots per remote peering @ switch: 2</li> <li>Max VPC loopbacks per switch: 500</li> <li>[ VPC loopback workarounds per switch are needed for local peering when both VPCs are attached to the switch or for external peering with VPC attached on the same switch that is peering with external ]</li> </ul>"},{"location":"release-notes/#software-versions","title":"Software versions","text":"<ul> <li>Fabric: v0.23.0</li> <li>Das-boot: v0.11.4</li> <li>Fabricator: v0.8.0</li> <li>K3s: v1.27.4-k3s1</li> <li>Zot: v1.4.3</li> <li>SONiC</li> <li>Broadcom Enterprise Base 4.1.1</li> <li>Broadcom Enterprise Campus 4.1.1</li> </ul>"},{"location":"release-notes/#known-limitations","title":"Known Limitations","text":"<ul> <li>MTU setting inflexibility:</li> <li>Fabric MTU is 9100 and not configurable right now (A3 planned)</li> <li>Server-facing MTU is 9136 and not configurable right now (A3+)</li> <li>no support for Access VLANs for attaching servers (A3 planned)</li> <li>VPC peering is enabled on all subnets of the participating VPCs. No subnet selection for peering. (A3 planned)</li> <li>peering with external is only possible with a VLAN (by design)</li> <li>If you have VPCs with remote peering on a switch group, you can\u2019t attach those VPCs on that switch group (by definition of remote peering)</li> <li>if a group of VPCs has remote peering on a switch group, any other VPC that will peer with those VPCs remotely will need to use the same switch group (by design)</li> <li>if VPC peers with external, it can only be remotely peered with on the same switches that have a connection to that external (by design)</li> <li>the server-facing connection object is immutable as it\u2019s very easy to get into a deadlock, re-create to change it (A3+)</li> </ul>"},{"location":"release-notes/#alpha-1","title":"Alpha-1","text":"<ul> <li> <p>Controller:</p> <ul> <li>A single controller connecting to each switch management port. No redundancy.</li> </ul> </li> <li> <p>Controller requirements:</p> <ul> <li>One 1 gig port per switch</li> <li>One+ 1 gig+ ports connecting to the external management network.</li> <li>4 Cores, 12GB RAM, 100GB SSD.</li> </ul> </li> <li> <p>Seeder:</p> <ul> <li>Seeder and Controller functions co-resident on the control node. Switch booting and ZTP on management ports directly connected to the controller.</li> </ul> </li> <li> <p>HHFab - the fabricator:</p> <ul> <li>An operational tool to generate, initiate, and maintain the fabric software appliance.  Allows fabrication of the environment-specific image with all of the required underlay and security configuration baked in.</li> </ul> </li> <li> <p>DHCP Service:</p> <ul> <li>A simple DHCP server for assigning IP addresses to hosts connecting to the fabric, optimized for use with VPC overlay.</li> </ul> </li> <li> <p>Topology:</p> <ul> <li>Support for a Collapsed Core topology with 2 switch nodes.</li> </ul> </li> <li> <p>Underlay:</p> <ul> <li>A simple single-VRF network with a BGP control plane.  IPv4 support only.</li> </ul> </li> <li> <p>External connectivity:</p> <ul> <li>An edge router must be connected to selected ports of one or both switches.  IPv4 support only.</li> </ul> </li> <li> <p>Dual-homing:</p> <ul> <li>L2 Dual homing with MCLAG is implemented to connect servers, storage, and other devices in the data center.  NIC bonding and LACP configuration at the host are required.</li> </ul> </li> <li> <p>VPC overlay implementation:</p> <ul> <li>VPC is implemented as a set of ACLs within the underlay VRF. External connectivity to the VRF is performed via internally managed VLANs.  IPv4 support only.</li> </ul> </li> <li> <p>VPC Peering:</p> <ul> <li>VPC peering is performed via ACLs with no fine-grained control.</li> </ul> </li> <li> <p>NAT</p> <ul> <li>DNAT + SNAT are supported per VPC. SNAT and DNAT can\u2019t be enabled per VPC simultaneously.</li> </ul> </li> <li> <p>Hardware support:</p> <ul> <li>Please see the supported hardware list.</li> </ul> </li> <li> <p>Virtual Lab:</p> <ul> <li>A simulation of the two-node Collapsed Core Topology as a virtual environment. Designed for use as a network simulation, a configuration scratchpad, or a training/demonstration tool.  Minimum requirements: 8 cores, 24GB RAM, 100GB SSD</li> </ul> </li> <li> <p>Limitations:</p> <ul> <li>40 VPCs max</li> <li>50 VPC peerings</li> <li>[ 768 ACL entry platform limitation from Broadcom ]</li> </ul> </li> <li> <p>Software versions:</p> <ul> <li>Fabricator: v0.5.2</li> <li>Fabric: v0.18.6</li> <li>Das-boot: v0.8.2</li> <li>K3s: v1.27.4-k3s1</li> <li>Zot: v1.4.3</li> <li>SONiC: Broadcom Enterprise Base 4.1.1</li> </ul> </li> </ul>"},{"location":"troubleshooting/overview/","title":"Troubleshooting","text":""},{"location":"user-guide/external/","title":"External Peering","text":"<p>Hedgehog Fabric uses Border Leaf concept to exchange VPC routes outside the Fabric and providing L3 connectivity. <code>External Peering</code> feature allows to set up an external peering endpoint and to enforce several policies between internal and external endpoints.</p> <p>Hedgehog Fabric does not operate Edge side devices.</p>"},{"location":"user-guide/external/#overview","title":"Overview","text":"<p>Traffic exit from the Fabric is done on Border Leafs that are connected with Edge devices. Border Leafs are suitable to terminate l2vpn connections and distinguish VPC L3 routable traffic towards Edge device as well as to land VPC servers. Border Leafs (or Borders) can connect to several Edge devices.</p> <p>External Peering is only available on the switch devices that are capable for sub-interfaces.</p>"},{"location":"user-guide/external/#connect-border-leaf-to-edge-device","title":"Connect Border Leaf to Edge device","text":"<p>In order to distinguish VPC traffic Edge device should be capable for - Set up BGP IPv4 to advertise and receive routes from the Fabric - Connect to Fabric Border Leaf over Vlan - Be able to mark egress routes towards the Fabric with BGP Communities - Be able to filter ingress routes from the Fabric by BGP Communities</p> <p>All other filtering and processing of L3 Routed Fabric traffic should be done on the Edge devices.</p>"},{"location":"user-guide/external/#control-plane","title":"Control Plane","text":"<p>Fabric is sharing VPC routes with Edge devices via BGP. Peering is done over Vlan in IPv4 Unicast AFI/SAFI.</p>"},{"location":"user-guide/external/#data-plane","title":"Data Plane","text":"<p>VPC L3 routable traffic will be tagged with Vlan and sent to Edge device. Later processing of VPC traffic (NAT, PBR, etc) should happen on Edge devices.</p>"},{"location":"user-guide/external/#vpc-access-to-edge-device","title":"VPC access to Edge device","text":"<p>Each VPC within the Fabric can ba allowed to access Edge devices. Additional filtering can be applied to the routes that VPC can export to Edge devices and import from the Edge devices.</p>"},{"location":"user-guide/external/#api-and-implementation","title":"API and implementation","text":""},{"location":"user-guide/external/#external","title":"External","text":"<p>General configuration starts with specification of <code>External</code> objects. Each object of <code>External</code> type can represent a set of Edge devices, or a single BGP instance on Edge device, or any other united Edge entities that can be described with following config</p> <ul> <li>Name of <code>External</code></li> <li>Inbound routes are marked with dedicated BGP community</li> <li>Outbound routes are required to be marked with dedicated community</li> </ul> <p>Each <code>External</code> should be bound to some VPC IP Namespace, otherwise prefixes overlap may happen.</p> <pre><code>apiVersion: vpc.githedgehog.com/v1alpha2\nkind: External\nmetadata:\n  name: default--5835\nspec:\n  inboundCommunity: # BGP Standard Community of routes from Edge devices\n  ipv4Namespace: # VPC IP Namespace\n  outboundCommunity: # BGP Standard Community required to be assigned on prefixes advertised from Fabric\n</code></pre>"},{"location":"user-guide/external/#connection","title":"Connection","text":"<p><code>Connection</code> of type <code>external</code> is used to identify switch port on Border leaf that is cabled with an Edge device.</p> <pre><code>apiVersion: wiring.githedgehog.com/v1alpha2\nkind: Connection\nmetadata:\n  name: # specified or generated\nspec:\n  external:\n    link:\n      switch:\n        port: # SwtichName/EthernetXXX\n</code></pre>"},{"location":"user-guide/external/#external-attachment","title":"External Attachment","text":"<p><code>External Attachment</code> is a definition of BGP Peering and traffic connectivity between a Border leaf and <code>External</code>. Attachments are bound to <code>Connection</code> with type <code>external</code> and specify <code>Vlan</code> that will be used to segregate particular Edge peering.</p> <pre><code>apiVersion: vpc.githedgehog.com/v1alpha2\nkind: ExternalAttachment\nmetadata:\n  name: #\nspec:\n  connection: # Name of the Connection with type external\n  external: # Name of the External to pick config\n  neighbor:\n    asn: # Edge device ASN\n    ip: # IP address of Edge device to peer with\n  switch:\n    ip: # IP Address on the Border Leaf to set up BGP peering\n    vlan: # Vlan ID to tag control and data traffic\n</code></pre> <p>Several <code>External Attachment</code> can be configured for the same <code>Connection</code> but for different <code>vlan</code>.</p>"},{"location":"user-guide/external/#external-vpc-peering","title":"External VPC Peering","text":"<p>To allow specific VPC have access to Edge devices VPC should be bound to specific <code>External</code> object. This is done via <code>External Peering</code> object.</p> <p><pre><code>apiVersion: vpc.githedgehog.com/v1alpha2\nkind: ExternalPeering\nmetadata:\n  name: # Name of ExternalPeering\nspec:\n  permit:\n    external:\n      name: # External Name\n      prefixes: # List of prefixes(routes) to be allowed to pick up from External\n      - # IPv4 Prefix\n    vpc:\n      name: # VPC Name\n      subnets: # List of VPC subnets name to be allowed to have access to External (Edge)\n      - # Name of the subnet within VPC\n</code></pre> <code>Prefixes</code> can be specified as <code>exact match</code> or with mask range indicators <code>le</code> and <code>ge</code> keywords. <code>le</code> is identifying prefixes lengths that are <code>less than or equal</code> and <code>ge</code> for prefixes lengths that are <code>greater than or equal</code>.</p> <p>Example: Allow ANY IPv4 prefix that came from <code>External</code> - allow all prefixes that match default route with any prefix length <pre><code>spec:\n  permit:\n    external:\n      name: ###\n      prefixes:\n      - le: 32\n        prefix: 0.0.0.0/0\n</code></pre> <code>ge</code> and <code>le</code> can also be combined.</p> <p>Example:  <pre><code>spec:\n  permit:\n    external:\n      name: ###\n      prefixes:\n      - le: 24\n        ge: 16\n        prefix: 77.0.0.0/8\n</code></pre> For instance, <code>77.42.0.0/18</code> will be matched for given prefix rule above, but <code>77.128.77.128/25</code> or <code>77.10.0.0/16</code> won't.</p>"},{"location":"user-guide/external/#examples","title":"Examples","text":"<p>This example will show peering with <code>External</code> object with name <code>HedgeEdge</code> given Fabric VPC with name <code>vpc-1</code> on the Border Leaf <code>switchBorder</code> that has a cable between an Edge device on the port <code>Ethernet42</code>. <code>vpc-1</code> is required to receive any prefixes advertised from the <code>External</code>.</p>"},{"location":"user-guide/external/#fabric-api-configuration","title":"Fabric API configuration","text":""},{"location":"user-guide/external/#external_1","title":"External","text":"<p><pre><code># hhfctl external create --name HedgeEdge --ipns default --in 65102:5000 --out 5000:65102\n</code></pre> <pre><code>apiVersion: vpc.githedgehog.com/v1alpha2\nkind: External\nmetadata:\n  name: HedgeEdge\n  namespace: default\nspec:\n  inboundCommunity: 65102:5000\n  ipv4Namespace: default\n  outboundCommunity: 5000:65102\n</code></pre></p>"},{"location":"user-guide/external/#connection_1","title":"Connection","text":"<p>Connection should be specified in the <code>wiring</code> diagram.</p> <pre><code>###\n### switchBorder--external--HedgeEdge\n###\napiVersion: wiring.githedgehog.com/v1alpha2\nkind: Connection\nmetadata:\n  name: switchBorder--external--HedgeEdge\nspec:\n  external:\n    link:\n      switch:\n        port: switchBorder/Ethernet42\n</code></pre>"},{"location":"user-guide/external/#externalattachment","title":"ExternalAttachment","text":"<p>Specified in <code>wiring</code> diagram <pre><code>apiVersion: vpc.githedgehog.com/v1alpha2\nkind: ExternalAttachment\nmetadata:\n  name: switchBorder--HedgeEdge\nspec:\n  connection: switchBorder--external--HedgeEdge\n  external: HedgeEdge\n  neighbor:\n    asn: 65102\n    ip: 100.100.0.6\n  switch:\n    ip: 100.100.0.1/24\n    vlan: 100\n</code></pre></p>"},{"location":"user-guide/external/#externalpeering","title":"ExternalPeering","text":"<pre><code>apiVersion: vpc.githedgehog.com/v1alpha2\nkind: ExternalPeering\nmetadata:\n  name: vpc-1--HedgeEdge\nspec:\n  permit:\n    external:\n      name: HedgeEdge\n      prefixes:\n      - le: 32\n        prefix: 0.0.0.0/0\n    vpc:\n      name: vpc-1\n      subnets:\n      - default\n</code></pre>"},{"location":"user-guide/external/#example-edge-side-bgp-configuration-based-on-sonic-os","title":"Example Edge side BGP configuration based on SONiC OS","text":"<p>NOTE: Hedgehog does not recommend to use SONiC OS as an Edge device. This example is used only as example of Edge Peer config</p> <p>Interface config <pre><code>interface Ethernet2.100\n encapsulation dot1q vlan-id 100\n description switchBorder--Ethernet42\n no shutdown\n ip vrf forwarding VrfHedge\n ip address 100.100.0.6/24\n</code></pre></p> <p>BGP Config <pre><code>!\nrouter bgp 65102 vrf VrfHedge\n log-neighbor-changes\n timers 60 180\n !\n address-family ipv4 unicast\n  maximum-paths 64\n  maximum-paths ibgp 1\n  import vrf VrfPublic\n !\n neighbor 100.100.0.1\n  remote-as 65103\n  !\n  address-family ipv4 unicast\n   activate\n   route-map HedgeIn in\n   route-map HedgeOut out\n   send-community both\n !\n</code></pre> Route Map configuration <pre><code>route-map HedgeIn permit 10\n match community Hedgehog\n!\nroute-map HedgeOut permit 10\n set community 65102:5000\n!\n\nbgp community-list standard HedgeIn permit 5000:65102\n</code></pre></p>"},{"location":"user-guide/fabric/","title":"HedgeHog Network Fabric","text":"<pre><code>The Hedgehog Network Fabric is an open source network architecture that provides connectivity between virtual and physical workloads and provides a way to achieve network isolation between different groups of workloads using standar BGP EVPN and vxlan technology. The fabric provides a standard kubernetes interfaces to manage the elements in the physical network and provides a mechanism to configure virtual networks and define attachments to these virtual networks.\nThe hedgehog Network Fabric provides isolation between different groups of workloads by placing them in different virtual networks called VPC's. To achieve this we define different abstractions starting from the physical network where we define `Connection` which defines how a physical server on the network connects to a physical switch on the fabric.\n</code></pre>"},{"location":"user-guide/fabric/#underlay-network","title":"Underlay Network","text":"<pre><code>The hedgehog fabric currently support two underlay network topologies.\n</code></pre>"},{"location":"user-guide/fabric/#collapsed-core","title":"Collapsed Core","text":"<p>A collapsed core topology is just a pair of switches connected in a mclag configuration with no other network elements. All workloads attach to these two switches. A  The leaf's in this setup are configured to be in a mclag pair and servers can either be connected to both switches as a mclag port channel or as orphan ports connected to only one switch. both the leaves peer to external networks using BGP and act as gateway for workloads attached to them. The configuration of the underlay in the collapsed core is very simple and is ideal for very small deployments.</p>"},{"location":"user-guide/fabric/#spine-leaf","title":"Spine - Leaf","text":"<p>A spine-leaf topology is a standard clos network with workloads attaching to leaf switches and spines providing connectivity between different leaves.  This kind of topology is useful for bigger deployments and provides all the advantages of a typical clos network. The underlay network is established using eBGP where each leaf has a separate ASN and peers will all spines in the network. we used RFC7938 as the reference for establishing the underlay network.</p>"},{"location":"user-guide/fabric/#overlay-network","title":"Overlay Network","text":"<p>The overlay network runs on top the underlay network to create a virtual network. The overlay network isolates control and data plane traffic between different virtual networks and the underlay network. Vitualization is achieved in the hedgehog fabric by encapsulating workload traffic over vxlan tunnels that are source and terminated on the leaf switches in the network. The fabric using BGP-EVPN/Vxlan to enable creation and management of virtual networks on top of the virtual. The fabric supports multiple virtual networks over the same underlay network to support multi-tenancy. Each virtual network in the hedgehog fabric is identified by a VPC. In the following sections we will dive a bit deeper into a high level overview of how are vpc's implemented in the hedgehog fabric and it's associated objects.</p>"},{"location":"user-guide/fabric/#vpc","title":"VPC","text":"<p>We know what is a VPC and how to attach workloads to a specific VPC. Let us now take a look at how is this actually implemented on the network to provice the view of a private network.   - Each VPC is modeled as a vrf on each switch where there are VPC attachments defined for this vpc. The Vrf is allocated its own VNI. The Vrf is local to each switch and the VNI is global for the entire fabric. By mapping the vrf to a VNI and configuring an evpn instance in each vrf we establish a shared l3vni across the entire fabric. All vrf participating in this vni can freely communicate with each other without a need for a policy. A Vlan is allocated for each vrf which functions as a IRB Vlan for the vrf.  - The vrf created on each switch corresponding to a VPC configures a BGP instance with evpn to advertise its locally attached subnets and import routes from its peered VPC's. The BGP instance in the tenant vrf's does not establish neighbor relationships and is purely used to advertise locally attached routes into the VPC (all vrf's with the same l3vni) across leafs in the network.  - A VPC can have multuple subnets.Each Subnet in the VPC is modeled as a Vlan on the switch. The vlan is only locally significant and a given subnet might have different Vlan's on different leaves on the network. We assign a globally significant vni for each subnet. This VNI is used to extend the subnet across different leaves in the network and provides a view of single streched l2 domain if the applications need it.   - The hedgehog fabric has a built-in DHCP server which will automatically assign IP addresses to each workload depending on the VPC it belongs to. This is achieved by configuring a DHCP relay on each of the server facing vlans. The DHCP server is accesible through the underlay network and is shared by all vpcs in the fabric. The inbuilt DHCP server is capable of identifying the source VPC of the request and assigning IP addresses from a pool allocated to the VPC at creation.  - A VPC by default cannot communicate to anyone outside the VPC and we need to define specific peering rules to allow communication to external networks or to other VPCs.</p>"},{"location":"user-guide/fabric/#vpc-peering","title":"VPC Peering","text":"<pre><code>To enable communication between 2 different VPC's we need to configure a VPC peering policy. The hedgehog fabric supports two different peering modes. \n- Local Peering - A local peering directly imports routers from the other VPC locally. This is achieved by a simple import route from the peer VPC. In case there are no locally attached worloads to the peer VPC the fabric automatically creates a stub vpc for peering and imports routes from it. This allows VPC's to peer with each other without the need for dedicated peering leaf. If a local peering is done for a pair of VPC's which have locally attached workloads the fabric automatically allocates a pair of ports on the switch to router traffic between these vrf's using static routes. This is required because of limitations in  the underlying platform. The net result of this is that the bandwidth between these 2 VPC's is limited by the bandwidth of the loopback interfaces allocated on the switch.\n- Remote Peering  - Remote peering is implemented using a dedicated peering switch/switches which is used as a rendezvous point for the 2 VPC's in the fabric. The set of switches to be used for peering is determined by configuration in the peering policy. When a remote peering policy is applied for a pair of VPC's the vrf's corresponding to these VPC's on the peering switch advertise default routes into their specific vrf's identified by the l3vni. All traffic that does not belong to the VPC's is forwarded to the peering switch and which has routes to the other VPC's and gets forwarded from there. The bandwith limitation that exists in the local peering solution is solved here as the bandwith between the two VPC's is determined by the fabric cross section bandwidth.\n</code></pre>"},{"location":"user-guide/overview/","title":"Overview","text":""},{"location":"user-guide/vpc/","title":"VPCs","text":""},{"location":"wiring/clos/","title":"Clos","text":"<p>Placeholder:</p> <pre><code>flowchart TD\n    spine1 --- leaf1\n    spine2 --- leaf1\n    spine1 --- leaf2\n    spine2 --- leaf2\n    spine1 --- leaf3\n    spine2 --- leaf3\n    spine1 --- leaf4\n    spine2 --- leaf4\n    leaf1 --- edge1\n    leaf2 --- edge1\n    leaf3 --- edge2\n    leaf4 --- edge2</code></pre>"},{"location":"wiring/overview/","title":"Wiring Diagram","text":""}]}